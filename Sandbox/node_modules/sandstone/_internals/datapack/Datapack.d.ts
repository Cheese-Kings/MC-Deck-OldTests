import type { LiteralUnion } from "../generalTypes";
import type { AdvancementType, JsonTextComponent, LootTableType, OBJECTIVE_CRITERION, PredicateType, RecipeType, TAG_TYPES } from "../arguments/index";
import { CommandsRoot } from "../commands/index";
import { Flow } from "../flow/index";
import type { HintedTagStringType, McFunctionOptions } from "../resources/index";
import { Advancement, LootTable, McFunction, Predicate, Recipe, Tag } from "../resources/index";
import type { ObjectiveClass } from "../variables/index";
import { SelectorCreator } from "../variables/index";
import type { CommandArgs } from "./minecraft";
import type { FunctionResource, ResourceOnlyTypeMap, ResourcePath, TagSingleValue } from "./resourcesTree";
import { ResourcesTree } from "./resourcesTree";
import type { SaveOptions } from "./saveDatapack";
export interface McFunctionReturn<T extends unknown[]> {
    (...args: T): void;
    schedule: (delay: number | LiteralUnion<'1t' | '1s' | '1d'>, type?: 'append' | 'replace', ...callbackArgs: T) => void;
    getName: (...args: T) => string;
    clearSchedule: (...args: T) => void;
}
export default class Datapack {
    defaultNamespace: string;
    currentFunction: FunctionResource | null;
    resources: ResourcesTree;
    objectives: Map<string, ObjectiveClass>;
    commandsRoot: CommandsRoot;
    constants: Set<number>;
    rootFunctions: Set<McFunction<any[]>>;
    static anonymousScoreId: number;
    flow: Flow;
    constructor(namespace: string);
    /** Get information like the path, namespace etc... from a resource name */
    getResourcePath(resourceName: string): {
        /** The namespace of the resource */
        namespace: string;
        /**
         * The path of the resource, EXCLUDING the resource name and the namespace.
         *
         * @example
         * getResourcePath('minecraft:test/myfunction').path === ['test']
         */
        path: string[];
        /**
         * The path of the resource, EXCLUDING the namespace.
         *
         * @example
         * getResourcePath('minecraft:test/myfunction').fullPath === ['test', 'myfunction']
         */
        fullPath: string[];
        /**
         * The path of the resource, INCLUDING the resource name and the namespace.
         *
         * @example
         * getResourcePath('minecraft:test/myfunction').fullPathWithNamespace === ['minecraft', 'test', 'myfunction']
         */
        fullPathWithNamespace: ResourcePath;
        /**
         * The name of the resource itself. Does not include the path nor the namespace.
         *
         * @example
         * getResourcePath('minecraft:test/myfunction').name === 'myfunction'
         */
        name: string;
        /**
         * The full name of the resource itself, as it should be refered in the datapack.
         *
         * @example
         * getResourcePath('minecraft:test/myfunction').name === 'minecraft:test/myfunction'
         */
        fullName: string;
    };
    /**
     * Creates and enters a new root Minecraft function.
     *
     * @param functionName The name of the function to create
     */
    private createEnterRootFunction;
    /**
     * Returns a unique name for a function, from an original name, by checking if it already exists in the given folder.
     * @param functionName the original name for the function.
     * @param folder the folder to check into.
     */
    private getUniqueNameFromFolder;
    /**
     * Get a unique name for a child function of the current function, from an original name.
     * @param childName The original name for the child function.
     */
    private getUniqueChildName;
    /**
     * Creates a new child function of the current function.
     * @param functionName The name of the child function.
     */
    createChildFunction(functionName: string): {
        childFunction: FunctionResource;
        functionName: string;
    };
    /**
     * Creates and enters a new child function of the current function.
     * @param functionName The name of the child function.
     */
    createEnterChildFunction(functionName: string): string;
    /**
     * Recursively exit the current function of the datapack.
     *
     * If we're in a child function of a root function (or a n-th child), it will exit them too.
     */
    private exitRootFunction;
    /**
     * Exit the current child function, and enter the parent function.
     */
    exitChildFunction(): void;
    registerNewObjective: (objective: ObjectiveClass) => void;
    /**
     * Register a new command in the current function.
     * @param commandArgs The arguments of the command to add.
     */
    registerNewCommand: (commandArgs: CommandArgs) => void;
    /**
     * Register a new numeric constant.
     */
    registerNewConstant(amount: number): void;
    /**
     * Add a function to a given function tag
     */
    addFunctionToTag(mcfunction: string, tag: string): void;
    /** UTILS */
    /** Create a new objective */
    createObjective: (name: string, criteria: LiteralUnion<OBJECTIVE_CRITERION>, display?: string | number | boolean | ({
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        text: string | number | boolean;
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        translate: string;
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        score: {
            name: import("../arguments/index").MultipleEntitiesArgument;
            objective: string;
            value?: number | undefined;
        };
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        selector: string;
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        keybind: string;
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        nbt: string; /**
         * The path of the resource, INCLUDING the resource name and the namespace.
         *
         * @example
         * getResourcePath('minecraft:test/myfunction').fullPathWithNamespace === ['minecraft', 'test', 'myfunction']
         */
        interpret?: boolean | undefined;
    } & {
        block: string | import("../variables/index").VectorClass<[string, string, string]>;
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        nbt: string; /**
         * The path of the resource, INCLUDING the resource name and the namespace.
         *
         * @example
         * getResourcePath('minecraft:test/myfunction').fullPathWithNamespace === ['minecraft', 'test', 'myfunction']
         */
        interpret?: boolean | undefined;
    } & {
        entity: string;
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        nbt: string; /**
         * The path of the resource, INCLUDING the resource name and the namespace.
         *
         * @example
         * getResourcePath('minecraft:test/myfunction').fullPathWithNamespace === ['minecraft', 'test', 'myfunction']
         */
        interpret?: boolean | undefined;
    } & {
        storage: string;
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | readonly (string | number | boolean | ({
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        text: string | number | boolean;
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        translate: string;
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        score: {
            name: import("../arguments/index").MultipleEntitiesArgument;
            objective: string;
            value?: number | undefined;
        };
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        selector: string;
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        keybind: string;
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        nbt: string; /**
         * The path of the resource, INCLUDING the resource name and the namespace.
         *
         * @example
         * getResourcePath('minecraft:test/myfunction').fullPathWithNamespace === ['minecraft', 'test', 'myfunction']
         */
        interpret?: boolean | undefined;
    } & {
        block: string | import("../variables/index").VectorClass<[string, string, string]>;
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        nbt: string; /**
         * The path of the resource, INCLUDING the resource name and the namespace.
         *
         * @example
         * getResourcePath('minecraft:test/myfunction').fullPathWithNamespace === ['minecraft', 'test', 'myfunction']
         */
        interpret?: boolean | undefined;
    } & {
        entity: string;
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        nbt: string; /**
         * The path of the resource, INCLUDING the resource name and the namespace.
         *
         * @example
         * getResourcePath('minecraft:test/myfunction').fullPathWithNamespace === ['minecraft', 'test', 'myfunction']
         */
        interpret?: boolean | undefined;
    } & {
        storage: string;
    } & {
        with?: import("../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | import("../variables/index").ComponentClass)[] | import("../variables/index").ComponentClass | undefined) => ObjectiveClass;
    /** Get an objective, and create it if it does not exists. */
    getCreateObjective(name: string, criteria: string, display?: JsonTextComponent): ObjectiveClass;
    /**
     * Creates a dynamic numeric variable, represented by an anonymous & unique score.
     *
     * @param initialValue The initial value of the variable. If left unspecified,
     * or if `undefined`, then the score will not be initialized.
     *
     * @param name A name that can be useful for debugging.
     */
    Variable: (initialValue?: number | undefined, name?: string | undefined) => import("../variables/PlayerScore").PlayerScore;
    Selector: typeof SelectorCreator;
    addResource: <T extends "functions" | "tags" | "advancements" | "predicates" | "loot_tables" | "recipes">(name: string, type: T, resource: Pick<ResourceOnlyTypeMap[T], Exclude<keyof ResourceOnlyTypeMap[T], "children" | "isResource" | "path">>) => void;
    /**
     * Creates a Minecraft Function.
     *
     * @param name The name of the function.
     * @param callback A callback containing the commands you want in the Minecraft Function.
     */
    mcfunction: <T extends any[]>(name: string, callback: (...args: T) => void, options?: McFunctionOptions | undefined) => McFunctionReturn<T>;
    Advancement: <T extends string>(name: string, advancement: AdvancementType<T>) => Advancement<T>;
    Predicate: (name: string, predicate: PredicateType) => Predicate;
    Tag: <T extends TAG_TYPES>(type: T, name: string, values: TagSingleValue<HintedTagStringType<T>>[], replace?: boolean | undefined) => Tag<T>;
    LootTable: (name: string, lootTable: LootTableType) => LootTable;
    Recipe: <P1 extends string, P2 extends string, P3 extends string>(name: string, recipe: RecipeType<P1, P2, P3>) => Recipe<P1, P2, P3>;
    /**
     * Saves the datapack to the file system.
     *
     * @param name The name of the Datapack
     * @param options The save options
     */
    save: (name: string, options?: SaveOptions) => void;
}
