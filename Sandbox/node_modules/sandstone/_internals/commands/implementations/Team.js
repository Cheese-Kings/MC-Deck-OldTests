"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Team = void 0;
const Command_1 = require("../Command");
const decorators_1 = require("../decorators");
const index_1 = require("../../variables/index");
class Team extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * Creates a new team.
         *
         * @param team Specifies the name of the team.
         *
         * @param displayName Specifies the team name to be displayed.
         */
        this.add = (team, displayName) => { };
        /**
         * Removes all members from a team.
         *
         * @param team Specifies the name of the team.
         */
        this.empty = (team) => { };
        /**
         * Makes specified entities join a team.
         *
         * @param team Specifies the name of the team.
         *
         * @param members Specifies the entities to join the team.
         * `'*'` may be used to represent all entities tracked by the scoreboard
         * If unspecified, defaults to the executor.
         */
        this.join = (team, members) => { };
        /**
         * Makes specified entities leave a team.
         *
         * @param members Specifies the entities to leave the team.
         * `'*'` may be used to represent all entities tracked by the scoreboard
         */
        this.leave = (members) => { };
        /**
         * Lists all teams, or lists all members of a team if `team` is set.
         *
         * @param team Specifies the name of the team.
         */
        this.list = (team) => { };
        this.modify = (...args) => { };
        /**
         * Removes a team.
         *
         * @param team Specifies the name of the team.
         */
        this.remove = (team) => { };
    }
}
__decorate([
    decorators_1.command(['team', 'add'], {
        isRoot: true,
        parsers: {
            '1': (displayName) => new index_1.JsonTextComponentClass(displayName),
        },
    }),
    __metadata("design:type", Object)
], Team.prototype, "add", void 0);
__decorate([
    decorators_1.command(['team', 'empty'], { isRoot: true }),
    __metadata("design:type", Object)
], Team.prototype, "empty", void 0);
__decorate([
    decorators_1.command(['team', 'join'], { isRoot: true }),
    __metadata("design:type", Object)
], Team.prototype, "join", void 0);
__decorate([
    decorators_1.command(['team', 'join'], { isRoot: true }),
    __metadata("design:type", Object)
], Team.prototype, "leave", void 0);
__decorate([
    decorators_1.command(['team', 'list'], { isRoot: true }),
    __metadata("design:type", Object)
], Team.prototype, "list", void 0);
__decorate([
    decorators_1.command(['team', 'modify'], { isRoot: true }),
    __metadata("design:type", Function)
], Team.prototype, "modify", void 0);
__decorate([
    decorators_1.command(['team', 'remove']),
    __metadata("design:type", Object)
], Team.prototype, "remove", void 0);
exports.Team = Team;
//# sourceMappingURL=Team.js.map