"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Forceload = void 0;
const Command_1 = require("../Command");
const decorators_1 = require("../decorators");
const index_1 = require("../../variables/index");
/** Parses coordinates, and returns numbers. Looses the relative/local/absolute information. */
function coordinatesToNumbers(coords) {
    const realCoords = Array.isArray(coords) ? coords : coords.values;
    return realCoords.map((coord) => parseInt(coord.replace(/[\^~]/, '') || '0', 10));
}
/**
 * Force chunks to load constantly or not.
 */
class Forceload extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * Forces the chunk at the `from` position (through to `to` if set) in the dimension of the command's execution to be loaded constantly.
         *
         * Fails if more than 256 chunks are added at once.
         *
         * @param from Specifies the start of the targeted chunks, in block coordinates.
         * @param to Specified the end of the targeted chunks, in block coordinates.
         * If unspecified, only targets the chunk specified by `from`.
         *
         * @example
         * // Forceload current chunk
         * forceload.add(rel(0, 0)
         */
        this.add = (from, to) => {
            if (!to)
                return;
            if (
            // If all coordinates are:
            [...from, ...to].every((c) => c[0] === '~') // Relative
                || [...from, ...to].every((c) => c[0] === '^') // or local
                || [...from, ...to].every((c) => c[0].match(/0-9/)) // or absolute
            ) {
                // Then we can calculate before-hand the number of affected chunks, and throw an error
                // if it's greater than 256
                const [fromX, fromZ] = coordinatesToNumbers(from);
                const [toX, toZ] = coordinatesToNumbers(to);
                const chunksX = Math.ceil((Math.abs(fromX - toX) + 1) / 16);
                const chunksZ = Math.ceil((Math.abs(fromZ - toZ) + 1) / 16);
                const affectedChunks = chunksX * chunksZ;
                if (affectedChunks > 256) {
                    throw new Error(`Impossible to forceload more than 256 chunks. From "${from}" to "${to}", at least ${affectedChunks} would be forceloaded.`);
                }
            }
        };
        /**
         * Unforces the chunk at the `from` position (through to `to` if set) in the dimension of the command's execution to be loaded constantly.
         *
         * @param from Specifies the start of the targeted chunks, in block coordinates.
         * @param to Specified the end of the targeted chunks, in block coordinates.
         * If unspecified, only targets the chunk specified by `from`.
         */
        this.remove = (from) => { };
        /** Unforces all chunks in the dimension of the command's execution to be loaded constantly. */
        this.removeAll = () => { };
        /**
         * If chunk coordinates are given, displays whether the specified chunk in the dimension of the command's execution is force loaded.
         * Otherwise, lists which chunks in the dimension of the command's execution are force loaded.
         *
         * @param pos Specifies a chunk to query, in block coordinates.
         * If unspecifiedd, lists which chunks are force loaded.
         *
         * @example
         */
        this.query = (pos) => { };
    }
}
__decorate([
    decorators_1.command(['forceload', 'add'], { isRoot: true, parsers: { '0': index_1.coordinatesParser, '1': index_1.coordinatesParser } }),
    __metadata("design:type", Object)
], Forceload.prototype, "add", void 0);
__decorate([
    decorators_1.command(['forceload', 'remove'], { isRoot: true, parsers: { '0': index_1.coordinatesParser, '1': index_1.coordinatesParser } }),
    __metadata("design:type", Object)
], Forceload.prototype, "remove", void 0);
__decorate([
    decorators_1.command(['forceload', 'remove', 'all'], { isRoot: true }),
    __metadata("design:type", Object)
], Forceload.prototype, "removeAll", void 0);
__decorate([
    decorators_1.command(['forceload', 'query'], { isRoot: true, parsers: { '0': index_1.coordinatesParser } }),
    __metadata("design:type", Object)
], Forceload.prototype, "query", void 0);
exports.Forceload = Forceload;
//# sourceMappingURL=Forceload.js.map