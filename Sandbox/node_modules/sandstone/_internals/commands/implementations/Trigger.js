"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Trigger = exports.TriggerArguments = void 0;
const Command_1 = require("../Command");
const decorators_1 = require("../decorators");
class TriggerArguments extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * Adds `value` to the current value of `objective`.
         *
         * @param value the value to add.
         */
        this.add = (value) => { };
        /**
         * Sets the value of `objective` to `value`.
         *
         * @param value the new value.
         */
        this.set = (value) => { };
    }
}
__decorate([
    decorators_1.command('add'),
    __metadata("design:type", Object)
], TriggerArguments.prototype, "add", void 0);
__decorate([
    decorators_1.command('add'),
    __metadata("design:type", Object)
], TriggerArguments.prototype, "set", void 0);
exports.TriggerArguments = TriggerArguments;
class Trigger extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * Modifies a scoreboard objective with a "trigger" criterion.
         * Allows non-operator players to modify their own scoreboard objectives under tightly controlled conditions.
         * Often used to let players activate systems made by operators or mapmakers.
         *
         * @param objective An enabled scoreboard objective with the "trigger" criterion.
         *
         * @example
         *
         * // Adds 1 to the current value of `myobjective`.
         * trigger('myobjective')
         *
         * // Adds 2 to the current value of `objective`
         * trigger('myobjective').add(2)
         *
         * // Sets the value of `objective` to 5
         * trigger('myobjective').set(5)
         *
         * // If you created an objective via createObjective, and it is enabled, you can use it:
         * trigger(myObjective).add(2)
         */
        this.trigger = (objective) => new TriggerArguments(this.commandsRoot);
    }
}
__decorate([
    decorators_1.command('trigger', { isRoot: true, hasSubcommands: true }),
    __metadata("design:type", Object)
], Trigger.prototype, "trigger", void 0);
exports.Trigger = Trigger;
//# sourceMappingURL=Trigger.js.map