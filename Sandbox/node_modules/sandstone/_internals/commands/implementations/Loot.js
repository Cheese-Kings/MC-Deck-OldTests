"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Loot = void 0;
const Command_1 = require("../Command");
const decorators_1 = require("../decorators");
const validators_1 = require("../validators");
const index_1 = require("../../variables/index");
class LootSource extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * Drops items that would be dropped by fishing with the given loot table, and the given tool.
         *
         * @param lootTable Specifies which loot table to use.
         *
         * @param pos Specifies the position of a block.
         *
         * @param tool Specifies an tool to fish.
         */
        this.fish = (lootTable, pos, tool) => { };
        /**
         * Drops items that would be dropped by the given loot table.
         *
         * @param lootTable Specifies which loot table to use.
         */
        this.loot = (lootTable) => { };
        /**
         * Drops items that would be dropped by killing the given entity.
         *
         * @param target Specifies one entity to kill simulatively.
         */
        this.kill = (target) => { };
        /**
         * Drops items that would be dropped by mining the given block, with the given tool.
         *
         * @param pos Specifies the position of a block.
         *
         * @param tool Specifies an tool to mine.
         */
        this.mine = (pos, tool) => { };
    }
}
__decorate([
    decorators_1.command('fish', { parsers: { '0': index_1.coordinatesParser } }),
    __metadata("design:type", Object)
], LootSource.prototype, "fish", void 0);
__decorate([
    decorators_1.command('loot'),
    __metadata("design:type", Object)
], LootSource.prototype, "loot", void 0);
__decorate([
    decorators_1.command('kill'),
    __metadata("design:type", Object)
], LootSource.prototype, "kill", void 0);
__decorate([
    decorators_1.command('mine', { parsers: { '0': index_1.coordinatesParser } }),
    __metadata("design:type", Object)
], LootSource.prototype, "mine", void 0);
/** Drops the given loot table into the specified inventory or into the world. */
class Loot extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * Spawns item entities.
         * @param targetPos Specifies the location where item drops.
         */
        this.spawn = (targetPos) => new LootSource(this.commandsRoot);
        /**
         * Distributes items to entities.
         *
         * @param entities Specifies one or more entities to modify
         *
         * @param slot Specifies the inventory slot to be modified. Must be one of the following:
         *
         * - `armor.chest`, `armor.feet`, `armor.head`, `armor.legs`, `weapon.mainhand`, `weapon.offhand`:
         *   for armor stands, mobs, and players only (though not all mobs show or make use of the items).
         *
         * - `container.<slot_number>`: for players, item frames (slot 0), and minecarts only.
         *
         * - `enderchest.slot_number`, `hotbar.slot_number`, `inventory.slot_number`: for players only.
         *
         * - `horse.saddle`: horses, donkeys, and mules only; *item* must be a saddle.
         *
         * - `horse.chest`: donkeys, and mules only; *item* must be a chest.
         *
         * - `horse.armor`: horses and llamas only; *item* must be a type of horse armor (if a horse) or a carpet (if a llama).
         *
         * - `horse.slot_number`: donkeys and mules with chests only.
         *
         * - `villager.slot_number`: villagers only.
         *
         * @param count Specifies the number of consecutive slots to be filled. Must be between 0 and 2147483647 (inclusive).
         */
        this.replaceEntity = (entities, slot, count) => {
            if (count)
                validators_1.validateIntegerRange(count, 'count', 0, 2147483647);
            return new LootSource(this.commandsRoot);
        };
        /**
         * Distributes items to blocks.
         *
         * @param targetPos Specifies the position of a block.
         *
         * @param slot Specifies the inventory slot to be modified.
         * Must be must be `container.<slot_number>` where `<slot_number>` is replaced with a number specifying the slot.
         *
         * - Chests, dispensers, droppers, hoppers, and trapped chests are numbered 0 for the top-left slot and then increase
         *   first horizontally, then vertically (so, for example, a chest's top row slots are numbered 0 to 8 from left to right).
         *   Double chests and double trapped chests are treated as two single container blocks.
         * - A brewing stand's bottom slots are numbered 0 to 2 from left to right, its top slot is 3 and the fuel slot is 4.
         * - A furnace's slots are numbered 0 for the input slot, 1 for the fuel slot, and 2 for the output slot.
         *
         * @param count Specifies the number of consecutive slots to be filled. Must be between 0 and 2147483647 (inclusive).
         */
        this.replaceBlock = (targetPos, slot, count) => {
            if (count)
                validators_1.validateIntegerRange(count, 'count', 0, 2147483647);
            return new LootSource(this.commandsRoot);
        };
        /**
         * Gives items to players, ignoring empty item stacks.
         *
         * @param players Specifies one or more players to give.
         */
        this.give = (players) => new LootSource(this.commandsRoot);
        /**
         * Distributes items to a container block.
         *
         * @param targetPos Specifies the position of a block.
         */
        this.insert = (targetPos) => new LootSource(this.commandsRoot);
    }
}
__decorate([
    decorators_1.command(['loot', 'spawn'], {
        isRoot: true, hasSubcommands: true, executable: false, parsers: { '0': index_1.coordinatesParser },
    }),
    __metadata("design:type", Object)
], Loot.prototype, "spawn", void 0);
__decorate([
    decorators_1.command(['loot', 'replace', 'entity'], { isRoot: true, hasSubcommands: true, executable: false }),
    __metadata("design:type", Object)
], Loot.prototype, "replaceEntity", void 0);
__decorate([
    decorators_1.command(['loot', 'replace', 'block'], {
        isRoot: true, hasSubcommands: true, executable: false, parsers: { '0': index_1.coordinatesParser },
    }),
    __metadata("design:type", Object)
], Loot.prototype, "replaceBlock", void 0);
__decorate([
    decorators_1.command(['loot', 'give'], { isRoot: true, hasSubcommands: true, executable: false }),
    __metadata("design:type", Object)
], Loot.prototype, "give", void 0);
__decorate([
    decorators_1.command(['loot', 'insert'], {
        isRoot: true, hasSubcommands: true, executable: false, parsers: { '0': index_1.coordinatesParser },
    }),
    __metadata("design:type", Object)
], Loot.prototype, "insert", void 0);
exports.Loot = Loot;
//# sourceMappingURL=Loot.js.map