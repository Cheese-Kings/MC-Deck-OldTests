import type { BASIC_COLORS, JsonTextComponent, MultipleEntitiesArgument } from "../../arguments/index";
import { Command } from "../Command";
interface TeamOptions {
    collisionRule: 'always' | 'never' | 'pushOtherTeams' | 'pushOwnTeam';
    color: BASIC_COLORS;
    deathMessageVisibility: 'never' | 'hideForOtherTeams' | 'hideForOwnTeam' | 'always';
    displayName: JsonTextComponent;
    friendlyFire: boolean;
    nametagVisibility: 'never' | 'hideForOtherTeams' | 'hideForOwnTeam' | 'always';
    prefix: JsonTextComponent;
    seeFriendlyInvisibles: boolean;
    /** Hey */
    suffix: JsonTextComponent;
}
export declare class Team extends Command {
    /**
     * Creates a new team.
     *
     * @param team Specifies the name of the team.
     *
     * @param displayName Specifies the team name to be displayed.
     */
    add: (team: string, displayName?: string | number | boolean | ({
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        text: string | number | boolean;
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        translate: string;
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        score: {
            name: MultipleEntitiesArgument;
            objective: string;
            value?: number | undefined;
        };
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        selector: string;
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        keybind: string;
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        nbt: string;
        interpret?: boolean | undefined;
    } & {
        block: string | import("../../variables/index").VectorClass<[string, string, string]>;
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        nbt: string;
        interpret?: boolean | undefined;
    } & {
        entity: string;
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        nbt: string;
        interpret?: boolean | undefined;
    } & {
        storage: string;
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | readonly (string | number | boolean | ({
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        text: string | number | boolean;
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        translate: string;
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        score: {
            name: MultipleEntitiesArgument;
            objective: string;
            value?: number | undefined;
        };
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        selector: string;
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        keybind: string;
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        nbt: string;
        interpret?: boolean | undefined;
    } & {
        block: string | import("../../variables/index").VectorClass<[string, string, string]>;
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        nbt: string;
        interpret?: boolean | undefined;
    } & {
        entity: string;
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | ({
        nbt: string;
        interpret?: boolean | undefined;
    } & {
        storage: string;
    } & {
        with?: import("../../arguments/index").TextComponentObject[] | undefined;
    } & {
        color?: "black" | "dark_blue" | "dark_green" | "dark_aqua" | "dark_red" | "dark_purple" | "gold" | "gray" | "dark_gray" | "blue" | "green" | "aqua" | "red" | "light_purple" | "yellow" | "white" | "reset" | (Pick<string, never> & {
            trimStart: () => string;
        }) | undefined;
        font?: string | undefined;
        bold?: boolean | undefined;
        italic?: boolean | undefined;
        underlined?: boolean | undefined;
        strikethrough?: boolean | undefined;
        obfuscated?: boolean | undefined;
    } & {
        insertion?: string | undefined;
        clickEvent?: {
            action: import("../../generalTypes").LiteralUnion<"open_url" | "open_file" | "run_command" | "suggest_command" | "change_page" | "copy_to_clipboard">;
            value: string;
        } | undefined;
        hoverEvent?: {
            action: "show_text";
            contents: JsonTextComponent;
        } | {
            action: "show_item";
            contents: {
                id: string;
                count?: number | undefined;
                tag?: string | undefined;
            };
        } | {
            action: "show_entity";
            contents: {
                name?: string | undefined;
                type: string;
                id: string;
            };
        } | undefined;
    }) | import("../../variables/index").ComponentClass)[] | import("../../variables/index").ComponentClass | undefined) => void;
    /**
     * Removes all members from a team.
     *
     * @param team Specifies the name of the team.
     */
    empty: (team: string) => void;
    /**
     * Makes specified entities join a team.
     *
     * @param team Specifies the name of the team.
     *
     * @param members Specifies the entities to join the team.
     * `'*'` may be used to represent all entities tracked by the scoreboard
     * If unspecified, defaults to the executor.
     */
    join: (team: string, members?: string | import("../../arguments/index")._ShowAlias | import("../../variables/index").SelectorClass<true, true> | import("../../variables/index").SelectorClass<true, false> | import("../../variables/index").SelectorClass<false, false> | import("../../variables/index").SelectorClass<false, true> | undefined) => void;
    /**
     * Makes specified entities leave a team.
     *
     * @param members Specifies the entities to leave the team.
     * `'*'` may be used to represent all entities tracked by the scoreboard
     */
    leave: (members: MultipleEntitiesArgument | '*') => void;
    /**
     * Lists all teams, or lists all members of a team if `team` is set.
     *
     * @param team Specifies the name of the team.
     */
    list: (team?: string | undefined) => void;
    modify: (
    /**
     * Modifies the option of the team.
     *
     * Value must be one of the following:
     *
     * - `collisionRule`: Decide what entities entities on this team can push.
     *
     * - `color`: Decide the color of the team and players in chat, above their head, on the Tab menu, and on the sidebar.
     * Also changes the color of the outline of the entities caused by the Glowing effect.
     *
     * - `deathMessageVisibility`: Decide whose death messages can be seen in chat.
     *
     * - `displayName`: Set the display name of the team.
     *
     * - `friendlyFire`: Enable/Disable players inflicting damage on each other when on the same team.
     * (Note: players can still inflict status effects on each other.) Does not affect non-player entities on a team.
     *
     * - `nametagVisibility`: Decide whose name tags above their heads can be seen.
     *
     * - `prefix`: Modifies the prefix that appears before players' names in chat.
     *
     * - `seeFriendlyInvisibles`: Decide if players can see invisible players on their team as semi-transparent or completely invisible.
     *
     * - `suffix`: Modifies the suffix that appears after players' names in chat.
     */
    (<T extends keyof TeamOptions>(option: T, value: TeamOptions[T]) => void) & 
    /**
     * Modifies the option of the team.
     *
     * Value must be one of the following:
     *
     * - `collisionRule`: Decide what entities entities on this team can push.
     *
     * - `color`: Decide the color of the team and players in chat, above their head, on the Tab menu, and on the sidebar.
     * Also changes the color of the outline of the entities caused by the Glowing effect.
     *
     * - `deathMessageVisibility`: Decide whose death messages can be seen in chat.
     *
     * - `displayName`: Set the display name of the team.
     *
     * - `friendlyFire`: Enable/Disable players inflicting damage on each other when on the same team.
     * (Note: players can still inflict status effects on each other.) Does not affect non-player entities on a team.
     *
     * - `nametagVisibility`: Decide whose name tags above their heads can be seen.
     *
     * - `prefix`: Modifies the prefix that appears before players' names in chat.
     *
     * - `seeFriendlyInvisibles`: Decide if players can see invisible players on their team as semi-transparent or completely invisible.
     *
     * - `suffix`: Modifies the suffix that appears after players' names in chat.
     */
    (<T extends string>(option: Exclude<T, keyof TeamOptions>, value: string) => void));
    /**
     * Removes a team.
     *
     * @param team Specifies the name of the team.
     */
    remove: (team: string) => void;
}
export {};
