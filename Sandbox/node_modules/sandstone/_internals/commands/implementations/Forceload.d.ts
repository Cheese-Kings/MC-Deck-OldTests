import type { ColumnCoordinates } from "../../arguments/index";
import { Command } from "../Command";
import type { VectorClass } from "../../variables/index";
/**
 * Force chunks to load constantly or not.
 */
export declare class Forceload extends Command {
    /**
     * Forces the chunk at the `from` position (through to `to` if set) in the dimension of the command's execution to be loaded constantly.
     *
     * Fails if more than 256 chunks are added at once.
     *
     * @param from Specifies the start of the targeted chunks, in block coordinates.
     * @param to Specified the end of the targeted chunks, in block coordinates.
     * If unspecified, only targets the chunk specified by `from`.
     *
     * @example
     * // Forceload current chunk
     * forceload.add(rel(0, 0)
     */
    add: (from: ColumnCoordinates, to?: VectorClass<[string, string]> | [x: string, z: string] | undefined) => void;
    /**
     * Unforces the chunk at the `from` position (through to `to` if set) in the dimension of the command's execution to be loaded constantly.
     *
     * @param from Specifies the start of the targeted chunks, in block coordinates.
     * @param to Specified the end of the targeted chunks, in block coordinates.
     * If unspecified, only targets the chunk specified by `from`.
     */
    remove: (from: ColumnCoordinates) => void;
    /** Unforces all chunks in the dimension of the command's execution to be loaded constantly. */
    removeAll: () => void;
    /**
     * If chunk coordinates are given, displays whether the specified chunk in the dimension of the command's execution is force loaded.
     * Otherwise, lists which chunks in the dimension of the command's execution are force loaded.
     *
     * @param pos Specifies a chunk to query, in block coordinates.
     * If unspecifiedd, lists which chunks are force loaded.
     *
     * @example
     */
    query: (pos?: VectorClass<[string, string]> | [x: string, z: string] | undefined) => void;
}
