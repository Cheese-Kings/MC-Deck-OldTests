"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Debug = void 0;
const Command_1 = require("../Command");
const decorators_1 = require("../decorators");
/**
 * Starts or stops a debugging session.
 * While active, includes notifications about potential performance bottlenecks in the console.
 * When stopped, creates a profiler results file in the folder `debug`.
 */
class Debug extends Command_1.Command {
    constructor() {
        super(...arguments);
        /** Starts a new debug profiling session. */
        this.start = () => { };
        /** Stops the active debug profiling session. */
        this.stop = () => { };
        /** Used to get more detailed information while debugging performance.
         * Saves information in the `.minecraft\debug` folder in the form of a zip file. */
        this.report = () => { };
    }
}
__decorate([
    decorators_1.command(['debug', 'start'], { isRoot: true }),
    __metadata("design:type", Object)
], Debug.prototype, "start", void 0);
__decorate([
    decorators_1.command(['debug', 'stop'], { isRoot: true }),
    __metadata("design:type", Object)
], Debug.prototype, "stop", void 0);
__decorate([
    decorators_1.command(['debug', 'report'], { isRoot: true }),
    __metadata("design:type", Object)
], Debug.prototype, "report", void 0);
exports.Debug = Debug;
//# sourceMappingURL=Debug.js.map