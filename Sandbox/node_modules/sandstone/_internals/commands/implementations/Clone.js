"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Clone = exports.CloneOptions = void 0;
const index_1 = require("../../variables/index");
const Command_1 = require("../Command");
const decorators_1 = require("../decorators");
class CloneOptions extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * Copy all blocks, overwriting all blocks of the destination region with the blocks from the source region.
         *
         * @param mode One of these three:
         * - `force`: Force the clone even if the source and destination regions overlap.
         * - `move`: Clone the source region to the destination region, then replace the source region with air. When used in filtered mask mode, only the cloned blocks are replaced with air.
         * - `normal`: Don't move or force.
         */
        this.replace = (mode) => { };
        /**
         * Copy only non-air blocks. Blocks in the destination region that would otherwise be overwritten by air are left unmodified.
         *
         * @param mode One of these three:
         * - `force`: Force the clone even if the source and destination regions overlap.
         * - `move`: Clone the source region to the destination region, then replace the source region with air. When used in filtered mask mode, only the cloned blocks are replaced with air.
         * - `normal`: Don't move or force.
         */
        this.masked = (mode) => { };
        /**
         * Clones only blocks with the block id specified by `filter`.
         *
         * @param filter The block ID to clone.
         *
         * @param mode One of these three:
         * - `force`: Force the clone even if the source and destination regions overlap.
         * - `move`: Clone the source region to the destination region, then replace the source region with air. When used in filtered mask mode, only the cloned blocks are replaced with air.
         * - `normal`: Don't move or force.
         */
        this.filtered = (filter, mode) => { };
    }
}
__decorate([
    decorators_1.command('replace'),
    __metadata("design:type", Object)
], CloneOptions.prototype, "replace", void 0);
__decorate([
    decorators_1.command('masked'),
    __metadata("design:type", Object)
], CloneOptions.prototype, "masked", void 0);
__decorate([
    decorators_1.command('filtered'),
    __metadata("design:type", Object)
], CloneOptions.prototype, "filtered", void 0);
exports.CloneOptions = CloneOptions;
class Clone extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * Clones blocks from one region to another.
         *
         * @param begin Specifies the coordinates of the first corner blocks of the source region.
         *
         * @param end Specifies the coordinates of the opposing corner blocks of the source region.
         *
         * @param destination Specifies the lower northwest corner of the destination region.
         * It corresponds to the block with the lowest X-axis, Y-axis and Z-axis value.
         *
         * @example
         *
         * // Clone blocks from `0 0 0` to `8 8 8` at the current location.
         * clone(abs(0, 0, 0), abs(8, 8, 8), rel(0, 0, 0))
         *
         * // Same as above, but only clone dirt blocks.
         * clone(abs(0, 0, 0), abs(8, 8, 8), rel(0, 0, 0)).filtered('minecraft:dirt')
         *
         * // Move the current block 1 block above
         * clone(rel(0, 0, 0), rel(0, 0, 0), rel(0, 1, 0)).replace('move')
         */
        this.clone = (begin, end, destination) => new CloneOptions(this.commandsRoot);
    }
}
__decorate([
    decorators_1.command('clone', {
        isRoot: true,
        hasSubcommands: true,
        parsers: {
            '0': index_1.coordinatesParser,
            '1': index_1.coordinatesParser,
            '2': index_1.coordinatesParser,
        },
    }),
    __metadata("design:type", Object)
], Clone.prototype, "clone", void 0);
exports.Clone = Clone;
//# sourceMappingURL=Clone.js.map