"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TagCommand = exports.TagArguments = void 0;
const Command_1 = require("../Command");
const decorators_1 = require("../decorators");
function checkTagName(tag) {
    if (!tag.match(/[A-Za-z0-9\-_+.]/g)) {
        throw new Error(`Invalid tag name "${tag}": Valid characters are uppercase and lowercase letters, numbers, hyphen, underscore, plus sign and period.`);
    }
}
class TagArguments extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * Adds a tag to the targets.
         *
         * @param name Specifies the name of the tag to be added into the targets.
         * Valid characters are uppercase and lowercase letters, numbers, hyphen, underscore, plus sign and period.
         */
        this.add = (name) => {
            checkTagName(name);
        };
        /**
         * Lists all tags on the targets.
         */
        this.list = () => { };
        /**
         * Removes a tag from the targets.
         *
         * @param name Specifies the name of the tag to be removed from the targets.
         * Valid characters are uppercase and lowercase letters, numbers, hyphen, underscore, plus sign and period.
         */
        this.remove = (name) => {
            checkTagName(name);
        };
    }
}
__decorate([
    decorators_1.command('add'),
    __metadata("design:type", Object)
], TagArguments.prototype, "add", void 0);
__decorate([
    decorators_1.command('list'),
    __metadata("design:type", Object)
], TagArguments.prototype, "list", void 0);
__decorate([
    decorators_1.command('remove'),
    __metadata("design:type", Object)
], TagArguments.prototype, "remove", void 0);
exports.TagArguments = TagArguments;
class TagCommand extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * Controls scoreboard tags on individual entities.
         *
         * In Java Edition, the number of tags owned by an entity cannot exceed 1024.
         *
         * @param targets Specifies the command's target.
         */
        this.tag = (targets) => new TagArguments(this.commandsRoot);
    }
}
__decorate([
    decorators_1.command('tag', { isRoot: true, executable: false, hasSubcommands: true }),
    __metadata("design:type", Object)
], TagCommand.prototype, "tag", void 0);
exports.TagCommand = TagCommand;
//# sourceMappingURL=Tag.js.map