"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Experience = void 0;
const Command_1 = require("../Command");
const decorators_1 = require("../decorators");
const validators_1 = require("../validators");
/** Adds, sets or removes player experience.  */
class Experience extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * Adds experience to the player(s).
         *
         * @param targets Specifies the target(s) of the command.
         *
         * @param amount
         * Specifies the amount of experience points or levels to give to the player.
         * Negative values remove experience instead of adding them.
         *
         * Must be between `-2147483648` and `2147483647` (inclusive).
         *
         * @param type
         * If `level`, adds levels of experience to the player.
         * If `points`, add points of experience to the player.
         *
         * If unspecified, defaults to `points`.
         */
        this.add = (targets, amount, type) => {
            validators_1.validateIntegerRange(amount, 'amount', -2147483648, 2147483647);
        };
        /**
         * Sets the experience of the player(s).
         *
         * @param targets Specifies the target(s) of the command.
         *
         * @param amount
         * Specifies the amount of experience points or levels to be set to the player.
         *
         * Must be between `0` and `2147483647` (inclusive).
         *
         * @param type
         * If `level`, sets the levels of experience of the player.
         * If `points`, sets the points of experience of the player.
         *
         * If unspecified, defaults to `points`.
         */
        this.set = (targets, amount, type) => {
            validators_1.validateIntegerRange(amount, 'amount', 0, 2147483647);
        };
        /**
         * Queries the experience of the player.
         *
         * @param target Specifies the target of the command.
         *
         * @param type
         * If `level`, queries the levels of experience of the player.
         * If `points`, queries the points of experience of the player.
         *
         * If unspecified, defaults to `points`.
         */
        this.query = (target, type) => { };
    }
}
__decorate([
    decorators_1.command(['experience', 'add'], { isRoot: true }),
    __metadata("design:type", Object)
], Experience.prototype, "add", void 0);
__decorate([
    decorators_1.command(['experience', 'set'], { isRoot: true }),
    __metadata("design:type", Object)
], Experience.prototype, "set", void 0);
__decorate([
    decorators_1.command(['experience', 'query'], { isRoot: true }),
    __metadata("design:type", Object)
], Experience.prototype, "query", void 0);
exports.Experience = Experience;
//# sourceMappingURL=Experience.js.map