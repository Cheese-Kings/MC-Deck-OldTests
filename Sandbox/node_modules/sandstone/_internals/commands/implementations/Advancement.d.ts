import type { MultiplePlayersArgument } from "../../arguments/index";
import { Command } from "../Command";
declare class AdvancementArguments extends Command {
    /** Adds or removes all loaded advancements. */
    everything: () => void;
    /**
     * Adds or removes a single advancement or criterion.
     *
     * @param advancement Specifies a valid namespaced id of the advancement to target.
     *
     * @param criterion Specifies a valid criterion of the advancement to manipulate.
     * The command defaults to the entire advancement.
     * If specified, the command refers to merely the criterion and not the entire advancement.
     */
    only: (advancement: string, criterion?: string | undefined) => void;
    /**
     * Adds or removes an advancement and all its children advancements.
     * Think of specifying everything from that advancement to the end.
     *
     * The exact order the operation is carried out in is:
     *
     *     specified advancement > child > child's child > ...
     *
     * When it operates on a child that branches, it iterates through all its children before continuing.
     *
     * @param advancement Specifies a valid namespaced id of the advancement to target.
     */
    from: (advancement: string) => void;
    /**
     * Specifies an advancement, and adds or removes all its parent advancements, and all its children advancements.
     * Think of specifying everything through the specified advancement, going both backwards and forwards.
     *
     * The exact order the operation is as if the command were executed with "until" specified, then with "from" specified:
     *
     *     parent > parent's parent > ... > root > specified advancement > child > child's child > ...
     *
     * @param advancement Specifies a valid namespaced id of the advancement to target.
     */
    through: (advancement: string) => void;
    /**
     * Adds or removes an advancement and all its parent advancements until the root for addition/removal.
     * Think of specifying everything from the start until that advancement.
     *
     * The exact order the operation is carried out in is:
     *
     *     parent > parent's parent > ... > root > specified advancement.
     *
     * @param advancement Specifies a valid namespaced id of the advancement to target.
     */
    until: (advancement: string) => void;
}
/** Gives or takes an advancement from one or more players. */
export declare class AdvancementCommand extends Command {
    /**
     * Adds specified advancements.
     *
     * @param targets Specifies one player or more.
     */
    grant: (targets: MultiplePlayersArgument) => AdvancementArguments;
    /**
     * Removes specified advancements.
     *
     * @param targets Specifies one player or more.
     */
    revoke: (targets: MultiplePlayersArgument) => AdvancementArguments;
}
export {};
