"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Title = exports.TitleArguments = void 0;
const Command_1 = require("../Command");
const decorators_1 = require("../decorators");
const index_1 = require("../../variables/index");
class TitleArguments extends Command_1.Command {
    constructor() {
        super(...arguments);
        this.clear = () => { };
        this.reset = () => { };
        this.title = (title) => { };
        this.subtitle = (subtitle) => { };
        this.actionbar = (actionbarText) => { };
        this.times = (fadeIn, stay, fadeOut) => { };
    }
}
__decorate([
    decorators_1.command('clear'),
    __metadata("design:type", Object)
], TitleArguments.prototype, "clear", void 0);
__decorate([
    decorators_1.command('reset'),
    __metadata("design:type", Object)
], TitleArguments.prototype, "reset", void 0);
__decorate([
    decorators_1.command('title', {
        parsers: {
            '0': (title) => new index_1.JsonTextComponentClass(title),
        },
    }),
    __metadata("design:type", Object)
], TitleArguments.prototype, "title", void 0);
__decorate([
    decorators_1.command('subtitle', {
        parsers: {
            '0': (subtitle) => new index_1.JsonTextComponentClass(subtitle),
        },
    }),
    __metadata("design:type", Object)
], TitleArguments.prototype, "subtitle", void 0);
__decorate([
    decorators_1.command('actionbar', {
        parsers: {
            '0': (actionbar) => new index_1.JsonTextComponentClass(actionbar),
        },
    }),
    __metadata("design:type", Object)
], TitleArguments.prototype, "actionbar", void 0);
__decorate([
    decorators_1.command('times'),
    __metadata("design:type", Object)
], TitleArguments.prototype, "times", void 0);
exports.TitleArguments = TitleArguments;
class Title extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * Controls text displayed on the screen.
         *
         * @param targets Specifies the player(s) to display a screen title to.
         *
         * @example
         * // Displays a red "Hello World" as title
         * title('@a').title([{text: 'Hello World', color: 'red'}])
         *
         * // Displays a target to kill in the actionbar
         * const target = Selector('@r')
         * title('@a').actionbar(['You target is: ', target])
         */
        this.title = (targets) => new TitleArguments(this.commandsRoot);
    }
}
__decorate([
    decorators_1.command('title', { isRoot: true, hasSubcommands: true }),
    __metadata("design:type", Object)
], Title.prototype, "title", void 0);
exports.Title = Title;
//# sourceMappingURL=Title.js.map