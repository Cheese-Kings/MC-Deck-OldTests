"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorldBorder = void 0;
const Command_1 = require("../Command");
const decorators_1 = require("../decorators");
/** These commands control the world border. */
class WorldBorder extends Command_1.Command {
    constructor() {
        super(...arguments);
        /**
         * Increases or decreases the world border diameter.
         *
         * @param distance Specifies the number of blocks to add to the world border diameter.
         *
         * @param time Specifies the number of seconds it should take for the world border to move from its current diameter to the new diameter.
         * If not specified, defaults to 0.
         */
        this.add = (distance, time) => { };
        /**
         * Recenters the world boundary.
         *
         * @param pos Specifies the horizontal coordinates of the world border's center.
         */
        this.center = (pos) => { };
        /**
         * Sets the world border damage amount to the specified value.
         * Any player outside the world border buffer takes this amount of damage per second per block past the world border buffer distance.
         *
         * @param damagePerBlock Specifies the damage a player takes per second per block past the world border buffer.
         * For example, if `damagePerBlock` is 0.1, a player 5 blocks outside the world border buffer takes 0.5 damage per second
         * (damage less than half a heart might not change the visual health display, but still accumulates). Initially set to 0.2.
         */
        this.damageAmount = (damagePerBlock) => { };
        /**
         * Sets the world border buffer distance to the specified value.
         * Players won't take damage until they move past this distance from the world border.
         *
         * @param distance Specifies the distance outside the world buffer a player must be before they start taking damage.
         * Initially set to 5.0.
         */
        this.damageBuffer = (distance) => { };
        /**
         * Returns the current world border diameter.
         */
        this.get = () => { };
        /**
         * Sets the world border diameter.
         *
         * @param distance Specifies the new diameter for the world border.
         *
         * @param time Specifies the number of seconds it should take for the world border to move from its current diameter to the new diameter.
         * If not specified, defaults to 0.
         */
        this.set = (distance, time) => { };
        /**
         * Sets the world border warning distance to the specified value.
         *
         * @param distance Specifies the distance from the world border at which players begins to see a visual warning of the world border's proximity.
         * Initially set to 5.
         */
        this.setWarningDistance = (distance) => { };
        /**
         * Sets the world border warning time to the specified value.
         *
         * @param time Specifies the number of seconds that a player begins to see a visual warning before a moving world border passes their position.
         * Initially set to 15.
         */
        this.setWarningTime = (time) => { };
    }
}
__decorate([
    decorators_1.command(['worldborder', 'add'], { isRoot: true }),
    __metadata("design:type", Object)
], WorldBorder.prototype, "add", void 0);
__decorate([
    decorators_1.command(['worldborder', 'center'], { isRoot: true }),
    __metadata("design:type", Object)
], WorldBorder.prototype, "center", void 0);
__decorate([
    decorators_1.command(['worldborder', 'damage', 'amount'], { isRoot: true }),
    __metadata("design:type", Object)
], WorldBorder.prototype, "damageAmount", void 0);
__decorate([
    decorators_1.command(['worldborder', 'damage', 'buffer'], { isRoot: true }),
    __metadata("design:type", Object)
], WorldBorder.prototype, "damageBuffer", void 0);
__decorate([
    decorators_1.command(['worldborder', 'get'], { isRoot: true }),
    __metadata("design:type", Object)
], WorldBorder.prototype, "get", void 0);
__decorate([
    decorators_1.command(['worldborder', 'set'], { isRoot: true }),
    __metadata("design:type", Object)
], WorldBorder.prototype, "set", void 0);
__decorate([
    decorators_1.command(['worldborder', 'warning', 'distance'], { isRoot: true }),
    __metadata("design:type", Object)
], WorldBorder.prototype, "setWarningDistance", void 0);
__decorate([
    decorators_1.command(['worldborder', 'warning', 'time'], { isRoot: true }),
    __metadata("design:type", Object)
], WorldBorder.prototype, "setWarningTime", void 0);
exports.WorldBorder = WorldBorder;
//# sourceMappingURL=WorldBorder.js.map