import type { Coordinates, NBTObject, SingleEntityArgument } from "../../arguments/index";
import { Command } from "../Command";
declare class DataGet extends Command {
    /**
     * Get the NBT of a block at the given position.
     *
     * @param targetPos The coordinates of the block to get the NBT from.
     * @param path The path of the NBT to get.
     * @param scale The scale to multiply the NBT value by.
     */
    block: (targetPos: Coordinates, path?: string | undefined, scale?: number | undefined) => void;
    /**
     * Get the NBT of a given entity.
     *
     * @param target The entity to get the NBT from.
     * @param path The path of the NBT to get.
     * @param scale The scale to multiply the NBT value by.
     */
    entity: (target: SingleEntityArgument, path?: string | undefined, scale?: number | undefined) => void;
    /**
     * Get the NBT from a given storage path.
     *
     * @param target The storage to get the NBT from.
     * @param path The path of the NBT to get.
     * @param scale The scale to multiply the NBT value by.
     */
    storage: (target: string, path?: string | undefined, scale?: number | undefined) => void;
}
declare class DataMerge extends Command {
    /**
     * Merge the NBT of a block at the given position, with the given NBT.
     *
     * @param targetPos The coordinates of the block to merge the NBT with.
     * @param nbt The NBT to merge with.
     */
    block: (targetPos: Coordinates, nbt: string) => void;
    /**
     * Merge the NBT of the given entity, with the given NBT.
     *
     * @param target The entity to merge the NBT with.
     * @param nbt The NBT to merge with.
     */
    entity: (target: SingleEntityArgument, nbt: string) => void;
    /**
     * Merge the NBT of the given storage path, with the given NBT.
     *
     * @param target The storage to merge the NBT with.
     * @param nbt The NBT to merge with.
     */
    storage: (target: string, nbt: string) => void;
}
declare class DataModifyValues extends Command {
    /**
     * Modify with the NBT of a block at the given position.
     *
     * @param sourcePosition The coordinates of the block to modify the NBT with.
     * @param sourcePath The path of the NBT to modify with.
     */
    fromBlock: (sourcePosition: Coordinates, sourcePath: string) => void;
    /**
     * Modify with the NBT of a given entity.
     *
     * @param source The entity to modify the NBT with.
     * @param sourcePath The path of the NBT to modify with.
     */
    fromEntity: (source: SingleEntityArgument, sourcePath: string) => void;
    /**
     * Modify with the NBT of a given storage path.
     *
     * @param source The storage path to modify the NBT with.
     * @param sourcePath The path of the NBT to modify with.
     */
    fromStorage: (source: string, sourcePath: string) => void;
    /**
     * Modify the NBT with the given value.
     */
    value: (value: NBTObject) => void;
}
declare class DataModifyType extends Command {
    /** Append the source data onto the end of the pointed-to list. */
    get append(): DataModifyValues;
    /**
     * Insert the source data into the pointed-to list as element `index`, then shift higher elements one position upwards.
     *
     * @param index The index to insert the NBT to.
     */
    insert: (index: number) => DataModifyValues;
    /** Merge the source data into the pointed-to object. */
    get merge(): DataModifyValues;
    /** Prepend the source data onto the beginning of the pointed-to list. */
    get prepend(): DataModifyValues;
    /** Set the tag specified by `targetPath` to the source data. */
    get set(): DataModifyValues;
}
declare class DataModify extends Command {
    /**
     * Modify the NBT of a block at the given position.
     *
     * @param targetPos The coordinates of the block to modify the NBT from.
     * @param path The path of the NBT to modify.
     */
    block: (targetPos: Coordinates, targetPath: string) => DataModifyType;
    /**
     * Modify the NBT of a given entity.
     *
     * @param target The entity to modify the NBT from.
     * @param path The path of the NBT to modify.
     */
    entity: (target: SingleEntityArgument, targetPath: string) => DataModifyType;
    /**
     * Modify the NBT from a given storage path.
     *
     * @param target The storage to modify the NBT from.
     * @param path The path of the NBT to modify.
     */
    storage: (target: string, targetPath: string) => DataModifyType;
}
declare class DataRemove extends Command {
    /**
     * Remove the NBT of a block at the given position.
     *
     * @param targetPos The coordinates of the block to remove the NBT from.
     * @param path The path of the NBT to remove.
     */
    block: (targetPos: Coordinates, targetPath: string) => void;
    /**
     * Remove the NBT of a given entity.
     *
     * @param target The entity to remove the NBT from.
     * @param path The path of the NBT to remove.
     */
    entity: (target: SingleEntityArgument, targetPath: string) => void;
    /**
     * Remove the NBT from a given storage path.
     *
     * @param target The storage to remove the NBT from.
     * @param path The path of the NBT to remove.
     */
    storage: (target: string, targetPath: string) => void;
}
/** Allows to get, merge, modify, and remove NBT data of a block entity, entity, or Command NBT storage. */
export declare class Data extends Command {
    /** Read off the entire NBT data or the subsection of the NBT data from the targeted block position or entity, scaled by `scale` if specified. */
    get: DataGet;
    /** Merge the NBT data from the sourced block position or entity with the specified `nbt` data. */
    merge: DataMerge;
    /** Modify the NBT data from the sourced block position or entity, with the specified operation and the given NBT. */
    modify: DataModify;
    /** Removes NBT data at `path` from the targeted block position or entity. Player NBT data cannot be removed. */
    remove: DataRemove;
}
export {};
