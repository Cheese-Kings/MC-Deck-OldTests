export declare const mcfunction: <T extends any[]>(name: string, callback: (...args: T) => void, options?: import("./_internals/resources/index").McFunctionOptions | undefined) => import("./_internals/datapack/Datapack").McFunctionReturn<T>, saveDatapack: (name: string, options?: import("./_internals/datapack/saveDatapack").SaveOptions) => void, Advancement: <T extends string>(name: string, advancement: import("./arguments").AdvancementType<T>) => import("./_internals/resources/index").Advancement<T>, Predicate: (name: string, predicate: import("./arguments").ObjectOrArray<({
    condition: "minecraft:alternative";
} & {
    terms: import("./arguments").ObjectOrArray<({
        condition: "minecraft:alternative";
    } & any) | ({
        condition: "minecraft:block_state_property";
    } & {
        block: import("./arguments").LiteralUnion<import("./arguments").BLOCKS>;
        properties?: Map<string, string> | undefined;
    }) | ({
        condition: "minecraft:damage_source_properties";
    } & {
        predicate: Partial<{
            blocked: boolean;
            dealt: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            taken: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            source_entity: unknown;
            type: Partial<{
                bypasses_armor: boolean;
                bypasses_invulnerability: boolean;
                bypasses_magic: boolean;
                is_explosion: boolean;
                is_fire: boolean;
                is_magic: boolean;
                is_projectile: boolean;
                is_lightning: boolean;
                direct_entity: unknown;
                source_entity: unknown;
            }>;
        }>;
    }) | ({
        condition: "minecraft:entity_properties";
    } & {
        entity: "this" | "killer" | "killer_player";
        predicate: unknown;
    }) | ({
        condition: "minecraft:entity_scores";
    } & {
        entity: "this" | "killer" | "killer_player";
        scores: Record<string, import("./_internals/arguments/resources/criteria").NumberOrMinMax>;
    }) | ({
        condition: "minecraft:inverted";
    } & {
        term: import("./arguments").ObjectOrArray<({
            condition: "minecraft:alternative";
        } & any) | ({
            condition: "minecraft:block_state_property";
        } & {
            block: import("./arguments").LiteralUnion<import("./arguments").BLOCKS>;
            properties?: Map<string, string> | undefined;
        }) | ({
            condition: "minecraft:damage_source_properties";
        } & {
            predicate: Partial<{
                blocked: boolean;
                dealt: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                taken: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                source_entity: unknown;
                type: Partial<{
                    bypasses_armor: boolean;
                    bypasses_invulnerability: boolean;
                    bypasses_magic: boolean;
                    is_explosion: boolean;
                    is_fire: boolean;
                    is_magic: boolean;
                    is_projectile: boolean;
                    is_lightning: boolean;
                    direct_entity: unknown;
                    source_entity: unknown;
                }>;
            }>;
        }) | ({
            condition: "minecraft:entity_properties";
        } & {
            entity: "this" | "killer" | "killer_player";
            predicate: unknown;
        }) | ({
            condition: "minecraft:entity_scores";
        } & {
            entity: "this" | "killer" | "killer_player";
            scores: Record<string, import("./_internals/arguments/resources/criteria").NumberOrMinMax>;
        }) | ({
            condition: "minecraft:inverted";
        } & any) | ({
            condition: "minecraft:killed_by_player";
        } & {
            inverse: boolean;
        }) | ({
            condition: "minecraft:location_check";
        } & {
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            offsetZ?: number | undefined;
            predicate: Partial<{
                biome: import("./arguments").LiteralUnion<import("./arguments").BIOMES>;
                block: Partial<{
                    block: import("./arguments").LiteralUnion<import("./arguments").BLOCKS>;
                    tag: string;
                    nbt: string;
                    state: Record<string, string | Pick<import("./_internals/arguments/resources/criteria").NumberOrMinMax, never>>;
                }>;
                dimension: import("./arguments").LiteralUnion<import("./arguments").DIMENSION_TYPES>;
                feature: import("./arguments").LiteralUnion<import("./arguments").STRUCTURES>;
                fluid: Partial<{
                    fluid: import("./arguments").LiteralUnion<import("./arguments").FLUIDS>;
                    tag: string;
                    state: Record<string, string | Pick<import("./_internals/arguments/resources/criteria").NumberOrMinMax, never>>;
                }>;
                light: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                position: Partial<{
                    x: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                    y: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                    z: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                }>;
                smokey: boolean;
            }>;
        }) | ({
            condition: "minecraft:match_tool";
        } & {
            predicate: Partial<{
                count: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                durability: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                enchantments: import("./_internals/arguments/resources/criteria").EnchantmentCriterion[];
                stored_enchantments: import("./_internals/arguments/resources/criteria").EnchantmentCriterion[];
                item: import("./arguments").LiteralUnion<import("./arguments").ITEMS>;
                nbt: string;
                potion: string;
                tag: string;
            }>;
        }) | ({
            condition: "minecraft:random_chance";
        } & {
            chance: number;
        }) | ({
            condition: "minecraft:random_chance";
        } & {
            chance: number;
        }) | ({
            condition: "minecraft:random_chance_with_looting";
        } & {
            chance: number;
            looting_multiplier: number;
        }) | ({
            condition: "minecraft:reference";
        } & {
            name: string;
        }) | ({
            condition: "minecraft:table_bonus";
        } & {
            enchantment: import("./arguments").LiteralUnion<import("./arguments").ENCHANTMENTS>;
            chances: number[];
        }) | ({
            condition: "minecraft:time_check";
        } & {
            value: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            period?: number | undefined;
        }) | ({
            condition: "minecraft:weather_check";
        } & {
            raining?: boolean | undefined;
            thundering?: boolean | undefined;
        })>;
    }) | ({
        condition: "minecraft:killed_by_player";
    } & {
        inverse: boolean;
    }) | ({
        condition: "minecraft:location_check";
    } & {
        offsetX?: number | undefined;
        offsetY?: number | undefined;
        offsetZ?: number | undefined;
        predicate: Partial<{
            biome: import("./arguments").LiteralUnion<import("./arguments").BIOMES>;
            block: Partial<{
                block: import("./arguments").LiteralUnion<import("./arguments").BLOCKS>;
                tag: string;
                nbt: string;
                state: Record<string, string | Pick<import("./_internals/arguments/resources/criteria").NumberOrMinMax, never>>;
            }>;
            dimension: import("./arguments").LiteralUnion<import("./arguments").DIMENSION_TYPES>;
            feature: import("./arguments").LiteralUnion<import("./arguments").STRUCTURES>;
            fluid: Partial<{
                fluid: import("./arguments").LiteralUnion<import("./arguments").FLUIDS>;
                tag: string;
                state: Record<string, string | Pick<import("./_internals/arguments/resources/criteria").NumberOrMinMax, never>>;
            }>;
            light: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            position: Partial<{
                x: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                y: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                z: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            }>;
            smokey: boolean;
        }>;
    }) | ({
        condition: "minecraft:match_tool";
    } & {
        predicate: Partial<{
            count: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            durability: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            enchantments: import("./_internals/arguments/resources/criteria").EnchantmentCriterion[];
            stored_enchantments: import("./_internals/arguments/resources/criteria").EnchantmentCriterion[];
            item: import("./arguments").LiteralUnion<import("./arguments").ITEMS>;
            nbt: string;
            potion: string;
            tag: string;
        }>;
    }) | ({
        condition: "minecraft:random_chance";
    } & {
        chance: number;
    }) | ({
        condition: "minecraft:random_chance";
    } & {
        chance: number;
    }) | ({
        condition: "minecraft:random_chance_with_looting";
    } & {
        chance: number;
        looting_multiplier: number;
    }) | ({
        condition: "minecraft:reference";
    } & {
        name: string;
    }) | ({
        condition: "minecraft:table_bonus";
    } & {
        enchantment: import("./arguments").LiteralUnion<import("./arguments").ENCHANTMENTS>;
        chances: number[];
    }) | ({
        condition: "minecraft:time_check";
    } & {
        value: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
        period?: number | undefined;
    }) | ({
        condition: "minecraft:weather_check";
    } & {
        raining?: boolean | undefined;
        thundering?: boolean | undefined;
    })>[];
}) | ({
    condition: "minecraft:block_state_property";
} & {
    block: import("./arguments").LiteralUnion<import("./arguments").BLOCKS>;
    properties?: Map<string, string> | undefined;
}) | ({
    condition: "minecraft:damage_source_properties";
} & {
    predicate: Partial<{
        blocked: boolean;
        dealt: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
        taken: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
        source_entity: unknown;
        type: Partial<{
            bypasses_armor: boolean;
            bypasses_invulnerability: boolean;
            bypasses_magic: boolean;
            is_explosion: boolean;
            is_fire: boolean;
            is_magic: boolean;
            is_projectile: boolean;
            is_lightning: boolean;
            direct_entity: unknown;
            source_entity: unknown;
        }>;
    }>;
}) | ({
    condition: "minecraft:entity_properties";
} & {
    entity: "this" | "killer" | "killer_player";
    predicate: unknown;
}) | ({
    condition: "minecraft:entity_scores";
} & {
    entity: "this" | "killer" | "killer_player";
    scores: Record<string, import("./_internals/arguments/resources/criteria").NumberOrMinMax>;
}) | ({
    condition: "minecraft:inverted";
} & {
    term: import("./arguments").ObjectOrArray<({
        condition: "minecraft:alternative";
    } & {
        terms: import("./arguments").ObjectOrArray<({
            condition: "minecraft:alternative";
        } & any) | ({
            condition: "minecraft:block_state_property";
        } & {
            block: import("./arguments").LiteralUnion<import("./arguments").BLOCKS>;
            properties?: Map<string, string> | undefined;
        }) | ({
            condition: "minecraft:damage_source_properties";
        } & {
            predicate: Partial<{
                blocked: boolean;
                dealt: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                taken: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                source_entity: unknown;
                type: Partial<{
                    bypasses_armor: boolean;
                    bypasses_invulnerability: boolean;
                    bypasses_magic: boolean;
                    is_explosion: boolean;
                    is_fire: boolean;
                    is_magic: boolean;
                    is_projectile: boolean;
                    is_lightning: boolean;
                    direct_entity: unknown;
                    source_entity: unknown;
                }>;
            }>;
        }) | ({
            condition: "minecraft:entity_properties";
        } & {
            entity: "this" | "killer" | "killer_player";
            predicate: unknown;
        }) | ({
            condition: "minecraft:entity_scores";
        } & {
            entity: "this" | "killer" | "killer_player";
            scores: Record<string, import("./_internals/arguments/resources/criteria").NumberOrMinMax>;
        }) | ({
            condition: "minecraft:inverted";
        } & any) | ({
            condition: "minecraft:killed_by_player";
        } & {
            inverse: boolean;
        }) | ({
            condition: "minecraft:location_check";
        } & {
            offsetX?: number | undefined;
            offsetY?: number | undefined;
            offsetZ?: number | undefined;
            predicate: Partial<{
                biome: import("./arguments").LiteralUnion<import("./arguments").BIOMES>;
                block: Partial<{
                    block: import("./arguments").LiteralUnion<import("./arguments").BLOCKS>;
                    tag: string;
                    nbt: string;
                    state: Record<string, string | Pick<import("./_internals/arguments/resources/criteria").NumberOrMinMax, never>>;
                }>;
                dimension: import("./arguments").LiteralUnion<import("./arguments").DIMENSION_TYPES>;
                feature: import("./arguments").LiteralUnion<import("./arguments").STRUCTURES>;
                fluid: Partial<{
                    fluid: import("./arguments").LiteralUnion<import("./arguments").FLUIDS>;
                    tag: string;
                    state: Record<string, string | Pick<import("./_internals/arguments/resources/criteria").NumberOrMinMax, never>>;
                }>;
                light: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                position: Partial<{
                    x: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                    y: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                    z: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                }>;
                smokey: boolean;
            }>;
        }) | ({
            condition: "minecraft:match_tool";
        } & {
            predicate: Partial<{
                count: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                durability: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                enchantments: import("./_internals/arguments/resources/criteria").EnchantmentCriterion[];
                stored_enchantments: import("./_internals/arguments/resources/criteria").EnchantmentCriterion[];
                item: import("./arguments").LiteralUnion<import("./arguments").ITEMS>;
                nbt: string;
                potion: string;
                tag: string;
            }>;
        }) | ({
            condition: "minecraft:random_chance";
        } & {
            chance: number;
        }) | ({
            condition: "minecraft:random_chance";
        } & {
            chance: number;
        }) | ({
            condition: "minecraft:random_chance_with_looting";
        } & {
            chance: number;
            looting_multiplier: number;
        }) | ({
            condition: "minecraft:reference";
        } & {
            name: string;
        }) | ({
            condition: "minecraft:table_bonus";
        } & {
            enchantment: import("./arguments").LiteralUnion<import("./arguments").ENCHANTMENTS>;
            chances: number[];
        }) | ({
            condition: "minecraft:time_check";
        } & {
            value: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            period?: number | undefined;
        }) | ({
            condition: "minecraft:weather_check";
        } & {
            raining?: boolean | undefined;
            thundering?: boolean | undefined;
        })>[];
    }) | ({
        condition: "minecraft:block_state_property";
    } & {
        block: import("./arguments").LiteralUnion<import("./arguments").BLOCKS>;
        properties?: Map<string, string> | undefined;
    }) | ({
        condition: "minecraft:damage_source_properties";
    } & {
        predicate: Partial<{
            blocked: boolean;
            dealt: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            taken: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            source_entity: unknown;
            type: Partial<{
                bypasses_armor: boolean;
                bypasses_invulnerability: boolean;
                bypasses_magic: boolean;
                is_explosion: boolean;
                is_fire: boolean;
                is_magic: boolean;
                is_projectile: boolean;
                is_lightning: boolean;
                direct_entity: unknown;
                source_entity: unknown;
            }>;
        }>;
    }) | ({
        condition: "minecraft:entity_properties";
    } & {
        entity: "this" | "killer" | "killer_player";
        predicate: unknown;
    }) | ({
        condition: "minecraft:entity_scores";
    } & {
        entity: "this" | "killer" | "killer_player";
        scores: Record<string, import("./_internals/arguments/resources/criteria").NumberOrMinMax>;
    }) | ({
        condition: "minecraft:inverted";
    } & any) | ({
        condition: "minecraft:killed_by_player";
    } & {
        inverse: boolean;
    }) | ({
        condition: "minecraft:location_check";
    } & {
        offsetX?: number | undefined;
        offsetY?: number | undefined;
        offsetZ?: number | undefined;
        predicate: Partial<{
            biome: import("./arguments").LiteralUnion<import("./arguments").BIOMES>;
            block: Partial<{
                block: import("./arguments").LiteralUnion<import("./arguments").BLOCKS>;
                tag: string;
                nbt: string;
                state: Record<string, string | Pick<import("./_internals/arguments/resources/criteria").NumberOrMinMax, never>>;
            }>;
            dimension: import("./arguments").LiteralUnion<import("./arguments").DIMENSION_TYPES>;
            feature: import("./arguments").LiteralUnion<import("./arguments").STRUCTURES>;
            fluid: Partial<{
                fluid: import("./arguments").LiteralUnion<import("./arguments").FLUIDS>;
                tag: string;
                state: Record<string, string | Pick<import("./_internals/arguments/resources/criteria").NumberOrMinMax, never>>;
            }>;
            light: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            position: Partial<{
                x: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                y: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
                z: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            }>;
            smokey: boolean;
        }>;
    }) | ({
        condition: "minecraft:match_tool";
    } & {
        predicate: Partial<{
            count: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            durability: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            enchantments: import("./_internals/arguments/resources/criteria").EnchantmentCriterion[];
            stored_enchantments: import("./_internals/arguments/resources/criteria").EnchantmentCriterion[];
            item: import("./arguments").LiteralUnion<import("./arguments").ITEMS>;
            nbt: string;
            potion: string;
            tag: string;
        }>;
    }) | ({
        condition: "minecraft:random_chance";
    } & {
        chance: number;
    }) | ({
        condition: "minecraft:random_chance";
    } & {
        chance: number;
    }) | ({
        condition: "minecraft:random_chance_with_looting";
    } & {
        chance: number;
        looting_multiplier: number;
    }) | ({
        condition: "minecraft:reference";
    } & {
        name: string;
    }) | ({
        condition: "minecraft:table_bonus";
    } & {
        enchantment: import("./arguments").LiteralUnion<import("./arguments").ENCHANTMENTS>;
        chances: number[];
    }) | ({
        condition: "minecraft:time_check";
    } & {
        value: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
        period?: number | undefined;
    }) | ({
        condition: "minecraft:weather_check";
    } & {
        raining?: boolean | undefined;
        thundering?: boolean | undefined;
    })>;
}) | ({
    condition: "minecraft:killed_by_player";
} & {
    inverse: boolean;
}) | ({
    condition: "minecraft:location_check";
} & {
    offsetX?: number | undefined;
    offsetY?: number | undefined;
    offsetZ?: number | undefined;
    predicate: Partial<{
        biome: import("./arguments").LiteralUnion<import("./arguments").BIOMES>;
        block: Partial<{
            block: import("./arguments").LiteralUnion<import("./arguments").BLOCKS>;
            tag: string;
            nbt: string;
            state: Record<string, string | Pick<import("./_internals/arguments/resources/criteria").NumberOrMinMax, never>>;
        }>;
        dimension: import("./arguments").LiteralUnion<import("./arguments").DIMENSION_TYPES>;
        feature: import("./arguments").LiteralUnion<import("./arguments").STRUCTURES>;
        fluid: Partial<{
            fluid: import("./arguments").LiteralUnion<import("./arguments").FLUIDS>;
            tag: string;
            state: Record<string, string | Pick<import("./_internals/arguments/resources/criteria").NumberOrMinMax, never>>;
        }>;
        light: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
        position: Partial<{
            x: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            y: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
            z: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
        }>;
        smokey: boolean;
    }>;
}) | ({
    condition: "minecraft:match_tool";
} & {
    predicate: Partial<{
        count: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
        durability: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
        enchantments: import("./_internals/arguments/resources/criteria").EnchantmentCriterion[];
        stored_enchantments: import("./_internals/arguments/resources/criteria").EnchantmentCriterion[];
        item: import("./arguments").LiteralUnion<import("./arguments").ITEMS>;
        nbt: string;
        potion: string;
        tag: string;
    }>;
}) | ({
    condition: "minecraft:random_chance";
} & {
    chance: number;
}) | ({
    condition: "minecraft:random_chance";
} & {
    chance: number;
}) | ({
    condition: "minecraft:random_chance_with_looting";
} & {
    chance: number;
    looting_multiplier: number;
}) | ({
    condition: "minecraft:reference";
} & {
    name: string;
}) | ({
    condition: "minecraft:table_bonus";
} & {
    enchantment: import("./arguments").LiteralUnion<import("./arguments").ENCHANTMENTS>;
    chances: number[];
}) | ({
    condition: "minecraft:time_check";
} & {
    value: import("./_internals/arguments/resources/criteria").NumberOrMinMax;
    period?: number | undefined;
}) | ({
    condition: "minecraft:weather_check";
} & {
    raining?: boolean | undefined;
    thundering?: boolean | undefined;
})>) => import("./_internals/resources/index").Predicate, Tag: <T extends import("./arguments").TAG_TYPES>(type: T, name: string, values: import("./_internals/datapack/resourcesTree").TagSingleValue<import("./_internals/resources").HintedTagStringType<T>>[], replace?: boolean | undefined) => import("./_internals/resources/index").Tag<T>, LootTable: (name: string, lootTable: import("./arguments").LootTableType) => import("./_internals/resources/index").LootTable, Recipe: <P1 extends string, P2 extends string, P3 extends string>(name: string, recipe: import("./arguments").RecipeType<P1, P2, P3>) => import("./_internals/resources/index").Recipe<P1, P2, P3>;
export { _ } from "./_internals/index";
